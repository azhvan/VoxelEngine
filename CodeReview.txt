
    Event.h/Events.cpp
    
   	 1) #include<Window.h> который нигде не используется и нужен только в Events.cpp,
   		 плохая практика хранить много заголовочных файлов в других заголовочных файлах,
   		 используй forward declaration везде кто только можно, используй precompile header для того чтобы не включать
   		 одни и те же библиотечные заголовки во многих файлах
   		 
   	 2) class Events выглядит как просто namespace, так как у него все поля и методы static,
   		 не используй класс если он не нужен или спроектируй класс который удобно использовать
   	 
   	 4) Утечка памяти, переменные Events::_keys и Events::_frames не вызывают delete,
   		 Использование сырых указателей вместо std::unique_ptr всегда чревата пропустить delete, почитай про RAII идиому и умные указатели
   	 
   	 6) Очень много "magic numbers", все цифры которые используются в коде должны иметь имя, используй enum или лучше enum class для именованых констант,
   		 или просто именованные константы если они поодиночные
   	 
   	 7) class Events похоже управляет всеми событиями окна, возможно EventManager лучше название для него, его так же лучше хранить как часть класса Window и только
    
    Shader.h/Shader.cpp
    
   	 1) #include <string> лучше переместить в cpp файл и заменить на
   		 class string; объявление перед class Shader{..} это и есть forward declaration
   		 
   	 
   	 4) load_shader возвращает указатель на выделенную память, нельзя гарантировать что она будет очищенна,
   		 используй std::unique_ptr или std::shared_ptr
   		 
   	 5) плохая идея бросать исключение если ошибку можно проверить через код ошибки вызвав после открытия файла проверку состояния потока std::ifstream::rdstate()
   	 
    Window.h/Window.cpp
    
   	 1) все поля и методы static, см. замечание 2 в Events.h/Events.cpp
   	 
   	 3) нету явно указаного значения для инициализации GLFWwindow* Window::window; (строка 6, файл Window.cpp)
   	 
   	 4) class Window должен существовать в единичном экземпляре, присмотрись к паттерну singlton, он не лучшее рещение,
   		 но в данном случае неплох
   	 
   	 5) Window плохое имя для класса на ОС Windows, так как JC не регистрозависимая и у нее так же есть системный библиотечный файл с именем window.h

    Общие рекомендации:
       	 
   	 2) Используй предкомпилированные заголоки и forward declaration
   	 
   	 3) Не управляй паматью руками, пусть RAII и умные указатели помогут
   	 
   	 4) Структурируй проект и библиотеки которые ему нужны
   	 
   
   		 
   		 
   	 
    	

